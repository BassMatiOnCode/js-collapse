<!DOCTYPE html>
<html lang="en-US"><head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="template-info" file-name="empty.htm" version="2022-12-01" editor="USP" />
<meta name="author" content="USP" />
<meta name="creation-date" content="2023-08-02" />
<meta name="editor" content="USP" />
<meta name="change-date" content="2023-08-02" />
<meta name="version" content="1" />
<meta name="categories" content="" />
<meta name="tags" content="" />
<meta name="description" content="This page deals with the implementation. We will start with collapsible chapters, because here we can start simple and develop the full concept in small steps. Additionally, collapsible chapters exhibit most of the functionality that will also appear in other collapsible structures.." />

<link rel="icon" type="image/png" href="/favicon.png" sizes="16x16" />
<link rel="stylesheet" href="/inc/page.css" />
<link rel="stylesheet" href="/site.css" />

<style> /* indentation styles */
table.test {
	border-collapse : collapse ;
	}
table.test td {
	border : 1px solid silver;
	padding : 10px 0px ;
	}
table.test td.padding {
	min-width : 30px ;
	background-color :  limegreen ;
	opacity : 0.2 ;
	}
table.test td.controller {
	min-width : 180px ;
	}
table.test div { 
	background-color : blanchedalmond ;
	}
table.test div::before {
	content : "\00A0"  ;  
	display : inline-block ;
	width : 30px ;
	background-repeat : no-repeat ;
	background-position : left center ;
	background-image : url( /inc/js-collapse/orange-plus.svg );
	border : 1px none green ;
	background-color : lightsteelblue;
}
table.test.b div::before {
	margin-left : -30px ;
	}
</style>
<style>
dl.requirement-list dd + dt { margin-top : 20px }  
dl.requirement-list dd.see::before { content : "See also: " }
dl.requirement-list dd.ref::before { content : "References: " }
dl.requirement-list span[cancelled]::before { content : "CANCELLED " ; color :indianred } 
</style>
 
<title>Web Toolbox > JS-Collapse > Implementation</title>

</head><body><header id="page-header"><object data="title.svg" type="image/svg+xml"></object></header><div id="main-toolbar"></div><main id="page-content">

<h1>Implementation Notes</h1>

<p id="page-abstract"></p>

<h2 cbc>Collapsible Containers</h2><div>

<p>The collapsible content container is an HTML element with its height changing between zero and 100 percent, controlled by a smooth transition:</p> 

<figcaption class="listing">Height transition rule</figcaption><pre>
[cbc] + div, 
[cbc] + dd, 
[cbc] > ul, 
[cbc] > ol {
	<hi>transition</hi> : height linear 1s ;
	}
</pre>

<p>During transition, the content is clipped vertically, i. e. at the bottom. This can be done with the CSS property <tt>overflow:hidden</tt> or <tt>overflow-y:clip</tt>. While <tt>clip</tt> can be used independently on the vertical and horizontal directions, the value is not supported by all browsers. So we will use <tt>hidden</tt> instead. To prevent the container from showing a horizontal scroll bar, <tt>hidden</tt> is used on both axes.</p>

<p>

<!--h2--></div>

<h2 cbc>Controller States</h2><div>

<p>A solid implementation suggests four states:</p>

<ul>
<li>expanded</li>
<li>collapsing</li>
<li>collapsed</li>
<li>expanding</li>
</ul>

<p>These states are visited in exactly the same order, up or down. Other transitions are not allowed.</p>

<p>The container state is stored in the <tt>cbc</tt> attribute of the controller element:</p>

<figcaption class="listing">CSS rules for container overflow control</figcaption><pre>
[cbc="expanded"] + div,
[cbc="expanded"] + dd,
[cbc="expanded"] > ul,
[cbc="expanded"] > ol {
	height : auto ;
	}
[cbc="collapsing"] + div,
[cbc="collapsing"] + dd,
[cbc="collapsing"] > ul,
[cbc="collapsing"] > ol {
	height : 0px ;
	overflow : hidden ;
	}
[cbc="collapsed"] + div,
[cbc="collapsed"] + dd,
[cbc="collapsed"] > ul,
[cbc="collapsed"] > ol {
	height : 0px ;
	overflow : hidden ;
	}
[cbc="expanding"] + div,
[cbc="expanding"] + dd,
[cbc="expanding"] > ul,
[cbc="expanding"] > ol {
	height : auto ;
	overflow : hidden ;
	}
</pre>

<p>In the collapsed state, content overflow must be hidden both horizontally and vertically, because non-visible content must not inflate the page width. Horizontally overflowing but invisible content could change the size of the horizontal scrollbar slider at the bottom of the browser window, so that the relation to the acutal visible page width is lost &ndash; which would confuse the user.</p>

<p>Note that CSS transistions require numerical height values for both start and end values. The script code takes care of this fact by overriding non-numerical values, supplied by CSS rules, with setting the <tt>element.style.height</tt> property to the appropriate numerical value.</p>

<p>Demo code: <a href="01-overflow.htm">Overflow:hidden</a> and <a href="02-overflow.htm">Overflow:clip</a>.</p>

<!--h2--></div>

<h2 cbc>Node Icons</h2><div>

<p>Demo: <a href="03-node-icons.htm">node-icons.htm</a></p>

<p>Node icons are implemented as background images of the <tt>::before</tt> pseudo-element of the controller:</p>

<figcaption class="listing">Icon image assignments</figcaption>
<pre>
[cbc="collapsing"]::before ,
[cbc="collapsed"]::before {
	background-image : url( /inc/js-collapse/orange-plus.svg );
	}
[cbc="expanding"]::before ,
[cbc="expanded"]::before {
	background-image : url( /inc/js-collapse/orange-minus.svg );
	}
</pre>

<p>The <tt>::before</tt> pseudo element creates a node right in front of the regular element content. It is configured as follows:</p>

<figcaption class="listing">Controller node icons base properties</figcaption>
<pre>
[cbc]::before {
	content : "\00A0"  ;  
	display : inline-block ;
	width : 30px ;
	background-repeat : no-repeat ;
	background-position : left center ;
	}
</pre>

<p>The CSS rule generates a pseudo-element with the specified static <tt>content</tt> text <em>in front</em> of the actual element content. Here we use the Unicode 0xA0 character, which is a non-breaking whitespace. A pure whitespace content would prevent the element from being rendered.</p>

<table class="test"><tr>
<td class="controller"><div>content text</div></td>
</tr></table>

<p>The <tt>display : inline-block</tt> setting allows the element to be sized, so that we can define a <tt>width</tt>, 30 pixels in this case. This shifts the item text 30 pixels to the right and thereby makes room for the icon and some space in between.</p>

<p>Background images can be sized and positioned independently, which otherwise could be difficult.</p>

<p>The icons size may depend on the controller tag name, or, to be precise, on the font size. For instance, an <tt>h1</tt> controller icon should be larger than an <tt>h5</tt> icon. This is solve with the following set of rules:</p>


<figcaption class="listing">Individual controller icon sizes</figcaption>
<pre>
h1[cbc]::before {	background-size : 27px }
h2[cbc]::before {	background-size : 25px }
h3[cbc]::before {	background-size : 22px }
h4[cbc]::before {	
	background-size : 20px ; 
	line-height : 20px ;
}
h5[cbc]::before {	
	background-size : 18px ; 
	line-height : 18px ;
	}
</pre>

<p>Icon image depend on the controller state, so we have a set of four rules that set the background image:</p>

<p>Another rule moves the collapsible chapter controllers to the left by setting a negative left margin:</p>

<figcaption class="listing">Moving the controller to the left</figcaption>
<pre>
[cbc]:has(+div) { margin-left : -20px ; }
</pre>

<p>This works because we use <tt>overflow-y : clip</tt> in the non-expanded states.</p>

<!--h2--></div>

<h2 cbc>Indentation</h2><div>

<p>Demo: <a href="04-content-indentation.htm">content-indentation.htm</a></p>

<p>Collapsible structures sometimes appear as nested "drawer" structures without indentation (collapsible chapters), or as indented tree structures, where indentations represent the hierarchy levels. Common to all structures is that a controller element with its icon somehow sticks out from the contentent. These different designs are controlled by three CSS properties:</p>

<figcaption class="listing">Indentation rules</figcaption>
<pre>
[cbc] + div {
	<cc>/* content indentation */</cc>
	padding-left : 20px ;
	}
[cbc]::before {
	<cc>/* controller icon container size and position */
	width : 20px ;
	margin-left : -20px ;
	}
</pre>

<p>The content container has some padding defined on the left side, here with a light green background color:</p> 

<table class="test"><tr>
<td class="padding">&nbsp;</td>
<td class="controller">content text</td>
</tr></table>

<p>This padding pushes the text content to the right. The size was chosen so that there is enough room for the icon and some space in front of the text.</p>

<p>A <tt>::before</tt> pseudo-element on the controller element, here with a light blue background, carries the controller icon. Its width matches the value of <tt>padding-left</tt> on the container:</p>

<table class="test a"><tr>
<td class="padding">&nbsp;</td>
<td class="controller"><div>content text</div></td>
</tr></table>

<p>The we put a negative <tt>margin-left</tt> on the icon container, which also matches the container's padding width. This effectively moves the icon container to the left:.</p>

<table class="test b"><tr>
<td class="padding">&nbsp;</td>
<td class="controller"><div>content text</div></td>
</tr></table>

<p>Note that the content text is also pulled to the left an now sits on its "normal" position.</p>

<p><em>Nested collapsible structures</em> exibit a natural indentation. In the following example, we have placed a collapsible structure inside the collapsible container of the other:</p>

<table class="test b"><tr>
<td class="padding">&nbsp;</td>
<td class="controller"><div>content text</div>
	<table class="test b"><tr>
	<td class="padding">&nbsp;</td>
	<td class="controller"><div>content text</div></td>
	</tr></table>
	</td>
</tr></table>

<p>The <tt>padding-left</tt> gives us the familiar indented tree structures of e. g. the File Explorer.</p>

<p>If we want to reduce indentation or want no indentation at all (e. g. with the subordinate book chapters), we can apply a negative left margin on the nested structure:</p>

<figcaption class="listing">No indenation</figcaption>
<pre>
[cbc]:has(+div) {
	margin-left : -20px ;
	}
[cbc] + div {
	padding-left : 20px ;
	margin-left : <hi>-20px</hi> ;
	}
</pre>

<p>The children of ordered lists need reduced indentation, because the space required for controller icon <em>plus</em> list item number is rather wide. Some negative left margin provides the proper amount of compensation so that a mixture of ordered and unordered lists in a tree looks homogeneous:</p>

<figcaption class="listing">Reduced indenation</figcaption>
<pre>
ol:has(>[cbc]) {
	padding-left : <hi>45px</hi> ;
	}
ol:has(>[cbc]) > li::before {
	width : <hi>45px</hi> ;
	margin-left : <hi>-45px</hi> ;
	}
ol.collapsible > li > ol ,
.collapsible ol > li > ol , 
ol.collapsible > li > ul , 
.collapsible ol > li > ul { 
	margin-left : <hi>-25px</hi> ;
	}
</pre>

<!--h2--></div>

<h2 cbc>Automated State Transitions</h2><div>

<p>Demo: <a href="05-event-transitions.htm">event-transitions.htm</a></p>

<p>To make collapsible structures interactively, we must add some script code with two event handlers: an <em>icon click handler</em>, and a <em>transition end handler</em>.</p>

<h3 cbc>Click Event Handler</h3><div>

<p>The code switches the controller state as follows:</p>

<figcaption class="listing">Icon click event handler</figcaption>
<pre>
export function controllerClickHandler ( evt ) {
	switch ( evt.target.getAttribute( "cbc" )) {
	case "expanded" :
		collapse( evt.target );
		break;
	case "collapsed" :
		expand( evt.target );
		break;
		}
	evt.preventDefault( );
	evt.stopPropagation( );
	}
</pre>

<!--h3--></div>

<h3 cbc>Collapsing a Content Container</h3><div>


<p>To collapse a content container, we must change the controller state from "expanded" to "collapsing".</p>

<figcaption class="listing">Container height control</figcaption>
<pre>
[cbc="expanded"] + div {
	height : <hi>auto</hi> ;
	}
[cbc="collapsing"] + div {
	height : <hi>0px</hi> ;
	}
</pre>

<p>Then we have a <tt>transition</tt> defined on the <tt>height</tt> property of the container: </p>

<figcaption class="listing">Container height control</figcaption>
<pre>
[cbc] + div {
	transition : height linear 1s ;
	}
</pre>

<p>The problem is that smooth height transitions only functions if both start and end values are numerical. Which is not the case. So the first thing the code has to do is to determine the actual height of the container and set the <tt>container.style.height</tt> to that value:</p>

<figcaption class="listing">Setting the numerical start height</figcaption>
<pre>
const container = getContainer( controller );
container.style.<hi>height</hi> = window.getComputedStyle( container ).height ;
</pre>

<p>The so-called inline style, defined directly on the style property of the element, overrides the value "inherited" from the CSS rules. So we have a numeric transition start value now.<p>

<p>The next thing to consider is that this instruction has not an immediate effect on the DOM, the action is inherently asynchronous, and changing the height property too early does not shoe the desired transition effect. I haven't found a related specification in the docs, instead, I learned it the hard way. We could use <tt>window.setTimeout()</tt>, but the required delay is rather non-deterministic and varies. A better way is to use <tt>window.getAnimationFrame()</tt>. The callback function is executed on the next available page repaint run, which is way more deterministic. But it needs <em>two</em> of such delays:</p>

<figcaption class="listing">Starting the transition</figcaption>
<pre>
window.requestAnimationFrame( ( ) => {
window.requestAnimationFrame( ( ) => {
	controller.setAttribute( "cbc", "collapsing" );
	container.style.removeProperty( "height" );
	} ) ;
</pre>

<p>The controller state is changed In the innermost callback function, which requests the container height to be zero. When the inline style height property is removed, the CSS rule comes into effect, and the smooth height transition begins to collapse the content container.</p> 

<p>Here is the complete code of the collapse function:</p>

<figcaption class="listing">Collapsing a content container</figcaption>
<pre>
function collapse ( controller ) { 
	const container = getContainer( controller );
	container.style.<hi>height</hi> = window.getComputedStyle( container ).height ;
	window.requestAnimationFrame( ( ) => {
	window.requestAnimationFrame( ( ) => {
		controller.setAttribute( "cbc", "collapsing" );
		container.style.removeProperty( "height" );
	 	} ) ;
		} ) ;
	} ;
</pre>

<!--h3--></div>

<h3 cbc>Finishing the Transition</h3><div>

<p>A transition end event handler is required to finish a transition:</p>

<figcaption class="listing">Collapsing a content container</figcaption>
<pre>
export function transitionEndHandler ( evt ) {
	<cc>//	Note: "this" points to the controller</cc>
	switch ( this.getAttribute( "cbc" )) {
	case "expanding" :
		this.setAttribute( "cbc", "expanded" );
		evt.target.style.removeProperty( "height" );
		break;
	case "collapsing" :
		this.setAttribute( "cbc", "collapsed" );
		break;
		}
	evt.preventDefault( );
	evt.stopPropagation( );
	}
</pre>

<p>The code has no visual effect, the sole purpose is to update the controller state, except for an expanding container, where the inline style height property is removed.</p>

<!--h3--></div>

<h3 cbc>Expanding a Container</h3><div>

<p>Expanding a container is very similar to collapsing a container, except that the start height is zero and the end height is unknown. To change that, we change the state to "expanding". The associated CSS rule sets the height to "auto". Now we can call <tt>window.getComputedStyle()</tt> to obtain a numerical height value for the expanded container.</p>

<figcaption class="listing">Expanding a container</figcaption>
<pre>
 function expand ( controller ) {
	controller.setAttribute( "cbc", "expanding" );
	const container = getContainer( controller );
	const height = window.getComputedStyle( container ).height ;
	container.style.height = "0px" ;
	window.requestAnimationFrame( ( ) => {
	window.requestAnimationFrame( ( ) => {
		container.style.height = height ;
		console.log( "Expanding to " + container.style.height );
		} ) ;
		} ) ;
	} ;
</pre>

<p>To prevent the container from instantly going to full height, we set the <tt>style.height</tt> on the element to zero pixels. Two animation frames later, the DOM state has settled and we can set <tt>container.style.height</tt> to the previously calculated value. This causes the container to start expanding.</p>

<p>The transition end event handler finally removes the <tt>style.height</tt> property and changes the controller state to "expanded".</p>

<!--h3--></div>

<!--h2--></div>

<h2>Sudden Content Position Changes</h2><div>

<p>When I removed the content container borders, the content started to abruptly change its vertical position when the controller enters or leaves the "expanded" state. Investigations indicate that </p>

<ol>
<li>The <tt>p</tt> elements have a top and bottom margins which vertically overflow the content container borders.</li>
<li>The upper margin of that paragraph does not collapse with the bottom margin of the controller element during height transition.</li>
<li>The upper paragraph margin <em>does</em> collapse with the controller's bottom margin in the state "expanded".</li>
<li>This behaviour disappears as soon as the content container has top and bottom borders.</li>
</ol>

<p>So the workaround defines a transparent border, and the effect disappears.</p>

<figcaption class="listing">Jumping content fix</figcaption>
<pre>
[cbc] + div  {
	border-top  : 1px solid transparent;
	border-bottom  : 1px solid transparent;
	}
</pre>

<!--h2--></div>

<h2 cbc>Dynamic Vertical Spacing</h2><div>

<p><a href="06-vertical-spacing.htm">vertical-spacing.htm</a></p>

<p>Collapsible chapters appear visually as lists with collapsible list items. A stack of drawers, sort of. Abundant space between collapsed list items looks strange. It would be nice if two consecutive closed chapters moved closer to each other.</p>

<p>To achieve that, we only have to add a few CSS rules:</p>

<figcaption class="listing">Styles for dynamic vertical spacings</figcaption>
<pre>
[cbc] { 
	transition : margin-top,margin-bottom linear,linear  1s,1s;
	}
[cbc="collapsed"]:has(+div+[cbc="collapsing"]) ,
[cbc="collapsing"]:has(+div+[cbc="collapsed"]) ,
[cbc="collapsed"]:has(+div+[cbc="collapsed"]) {
	margin-bottom : 0px ;
	}
[cbc="collapsed"]+div+[cbc="collapsing"] ,
[cbc="collapsing"]+div+[cbc="collapsed"] ,
[cbc="collapsed"]+div+[cbc="collapsed"] {
	margin-top : 0px ;
	}
</pre>

<p>The idea is to reduce the bottom and top margins of adjacent collapsed controllers, and to add a transition property on these controllers.</p>

<!--h2--></div>

</main><footer id="page-footer"></footer><script type="module" src="/inc/page.js" ></script></body></html>